// Gradle Build file.

apply plugin: 'java'
apply plugin: 'osgi'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'com.google.protobuf'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

final File buildDir = file(".");
final Properties props = new Properties()
props.load(new FileInputStream(buildDir.getAbsolutePath() + "/src/main/resources/com/neuronrobotics/nrjavaserial/build.properties"))

group = "com.guardhat"
archivesBaseName = "nrjavaserial"
version = props."app.version"

sourceSets {
    test {
        java {
            srcDirs = ["test/java/src/"]
        }
    }
    main {
        resources {
            srcDirs = ["src/main/resources", "src/main/c/resources"]
            includes = ["**/*.so", "**/*.dll", "**/*.jnilib", "**/*.properties"]
        }
    }
}

jar.archiveName = "nrjavaserial-${props.'app.version'}.jar"

task wrapper(type: Wrapper, description: 'Creates and deploys the Gradle wrapper to the current directory.') {
    gradleVersion = '4.2.1'
}

repositories {
    mavenCentral()
    jcenter()
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.3'
    }
}

protobuf {
    generatedFilesBaseDir = "$projectDir/gen"
}

clean {
    delete protobuf.generatedFilesBaseDir
}

idea {
    module {
        testSourceDirs += file("${protobuf.generatedFilesBaseDir}/main/java");
        // If you have additional sourceSets and/or codegen plugins, add all of them
        //sourceDirs += file("${protobuf.generatedFilesBaseDir}/main/grpc");
    }
}

dependencies {
    compile fileTree(dir: 'libs', includes: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'commons-net:commons-net:3.6'
    compile 'net.java.dev.jna:jna:4.5.0'
    compile 'net.java.dev.jna:jna-platform:4.5.0'
    compile 'com.google.protobuf:protobuf-java:3.4.0'
}

jar {
    jar.duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(
                "Created-By": "Neuron Robotics Cooperative",
                "Specification-Title": props."app.name",
                "Specification-Version": props."app.version",
                "Specification-Vendor": "Neuron Robotics Cooperative",
                "Implementation-Title": props."app.name",
                "Implementation-Version": props."app.version",
                "Implementation-Vendor": "Guardhat Inc.",
        )
        instruction 'Import-Package', 'com.sun.jna.platform.win32;resolution:=optional,org.apache.commons.net.telnet;resolution:=optional,*'
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from(sourceSets.main.allSource) {
        exclude 'native/'
    }
}

signing {
    required {
        gradle.taskGraph.hasTask("uploadArchives")
    }
    sign configurations.archives
}

artifacts {
    archives javadocJar
    archives sourcesJar
    archives jar
}
